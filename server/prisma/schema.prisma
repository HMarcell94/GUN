// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Institution {
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  city String @db.VarChar(255)
  director_id Int

  director Employee @relation(fields: [director_id], references: [id])
  employees InstitutionEmployee[]
  groups Group[]
  
  @@map("institutions")
}

model Employee {
  id Int @id @default(autoincrement())
  first_name String @db.VarChar(100)
  last_name String @db.VarChar(100)
  email String @db.VarChar(100) @unique
  password String @db.VarChar(255)
  phone String @db.VarChar(100)
  day_count Int
  prev_year_day_count Int @default(0)
  group_id Int?

  roles UserRole[]
  directedInstitutions Institution[]
  institutions InstitutionEmployee[]
  dayOffs DayOff[]
  group Group? @relation(fields: [group_id], references: [id])
  resolvedDayOffs DayOff[] @relation(name: "resolver")

  @@map("employees")
}

model Group {
  id Int @id @default(autoincrement())
  name String @db.VarChar(100)
  institution_id Int

  instituion Institution @relation(fields: [institution_id], references: [id])
  employees Employee[]
}

model Role {
  id Int @id @default(autoincrement())
  tag String @db.VarChar(100) @unique
  name String @db.VarChar(255)

  users UserRole[]
  @@map("roles")
}

model UserRole {
  user_id Int
  role_id Int

  user Employee @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role Role @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([user_id, role_id])
  @@map("user_roles")
}

model InstitutionEmployee {
  institution_id Int
  employee_id Int

  institution Institution @relation(fields: [institution_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employee Employee @relation(fields: [employee_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([institution_id, employee_id])
  @@map("institution_employees")
}

model DayOffType {
  id Int @id @default(autoincrement())
  name String @db.VarChar(100)

  dayOffs DayOff[]

  @@map("day_off_types")
}

model DayOff {
  id Int @id @default(autoincrement())
  employee_id Int
  from DateTime @db.DateTime(0)
  to DateTime @db.DateTime(0)
  days Float
  type_id Int
  is_plan Boolean @default(false)
  reason String? @db.Text
  resolved_by Int?
  resolved_at DateTime? @db.DateTime(0)

  employee Employee @relation(fields: [employee_id], references: [id])
  type DayOffType @relation(fields: [type_id], references: [id])
  resolved Employee? @relation(fields: [resolved_by], references: [id], name: "resolver")

  @@map("day_offs")
}